{"version":3,"sources":["Header.js","Body.js","Footer.js","App.js","serviceWorker.js","reducers/todo.js","reducers/index.js","index.js"],"names":["Header","style","fontSize","margin","paddingLeft","Body","todoRef","React","createRef","_handleNewTodo","e","newTodo","current","value","props","addNewTodo","preventDefault","todos","this","onSubmit","ref","type","map","item","index","key","Component","connect","state","dispatch","todo","Footer","App","className","Boolean","window","location","hostname","match","action","combineReducers","store","createStore","reducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6QAceA,MAZf,WACI,OACI,yBAAKC,MAAO,CACRC,SAAU,GACVC,OAAQ,OACRC,YAAa,UAHjB,sC,OCAFC,E,2MAEFC,QAAUC,IAAMC,Y,EAEhBC,eAAiB,SAACC,GACd,IAAIC,EAAU,EAAKL,QAAQM,QAAQC,MACnC,EAAKC,MAAMC,WAAWJ,GAEtBD,EAAEM,iBACF,EAAKV,QAAQM,QAAQC,MAAQ,I,wEAGxB,IACGI,EAAUC,KAAKJ,MAAfG,MACR,OACI,6BACI,gDACA,0BAAME,SAAUD,KAAKT,gBACjB,+BACI,4BACI,4BACI,2CAAgB,2BAAOW,IAAKF,KAAKZ,aAGzC,4BACI,4BACI,4BAAQe,KAAK,UAAb,aAKhB,+BACKJ,EAAMK,KAAI,SAACC,EAAMC,GAAP,OAAiB,4BAAI,wBAAIC,IAAKD,GAAQD,a,GAhClDhB,IAAMmB,WAgDVC,eATa,SAAAC,GAAK,MAAK,CAC9BX,MAAOW,EAAMX,UAGU,SAAAY,GAAQ,MAAK,CACpCd,WAAY,SAAAe,GAAI,OAAID,EAAS,CAACR,KAAM,WAAYS,aAIzCH,CAA6CtB,GCtC7C0B,MAZf,WACI,OACI,yBAAK9B,MAAO,CACRC,SAAU,GACVC,OAAQ,OACRC,YAAa,UAHjB,yBCgBO4B,E,iLAZX,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKC,UAAY,kBACf,kBAAC,EAAD,OAEF,kBAAC,EAAD,W,GARU1B,IAAMmB,WCMJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCNSrB,EAZD,WAAwB,IAAvBW,EAAsB,uDAAd,GAAIW,EAAU,uCACjC,OAAOA,EAAOlB,MACV,IAAK,WACD,MAAM,GAAN,mBACOO,GADP,CAEIW,EAAOT,OAEf,QACI,OAAOF,ICLJY,cAAgB,CAAEvB,UCO3BwB,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SHmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19eaa02e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header(){\r\n    return(\r\n        <div style={{\r\n            fontSize: 35,\r\n            margin: '50px',\r\n            paddingLeft: '500px'\r\n        }}>\r\n            Selamat Datang di Sanbercode Todo\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Body extends React.Component{\r\n\r\n    todoRef = React.createRef();\r\n\r\n    _handleNewTodo = (e) =>{\r\n        let newTodo = this.todoRef.current.value;\r\n        this.props.addNewTodo(newTodo);\r\n        \r\n        e.preventDefault();\r\n        this.todoRef.current.value = '';\r\n    };\r\n\r\n    render(){\r\n        const { todos } = this.props;\r\n        return (\r\n            <div>\r\n                <div>Daftar Kegiatan</div>\r\n                <form onSubmit={this._handleNewTodo}>\r\n                    <table>\r\n                        <tr>\r\n                            <td>\r\n                                <label>Kegiatan <input ref={this.todoRef} /></label>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <button type=\"submit\">Input</button>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </form>\r\n                <table>\r\n                    {todos.map((item, index) => <ul><li key={index}>{item}</li></ul>)}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n    }\r\n\r\n    const mapStateToProps = state => ({\r\n        todos: state.todos\r\n    })\r\n\r\n    const mapDispatchToProps = dispatch => ({\r\n        addNewTodo: todo => dispatch({type: 'ADD TODO', todo\r\n    })\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Body);","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div style={{\r\n            fontSize: 18,\r\n            margin: '20px',\r\n            paddingLeft: '100px'\r\n        }}>\r\n            Sanbercode &copy; 2020\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Body from './Body';\nimport Footer from './Footer';\n\nclass App extends React.Component{\n  render(){\n    return (\n      <div>\n        <Header />\n        <div className = \"App App-header\" >\n          <Body />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const todos = (state = [], action) =>{\r\n    switch(action.type){\r\n        case 'ADD TODO':\r\n            return [\r\n                ...state,\r\n                action.todo\r\n            ];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default todos;","import { combineReducers } from 'redux';\r\nimport todos from './todo';\r\n\r\nexport default combineReducers({ todos });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}